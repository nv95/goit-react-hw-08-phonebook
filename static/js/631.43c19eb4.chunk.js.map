{"version":3,"file":"static/js/631.43c19eb4.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","Pages/PhoneBook.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  margin: 30px auto;\n  width: 300px;\n  padding: 20px;\n  display: block;\n  border: 1px solid #477405;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\nexport const Button = styled.button`\n  background-color: #0a0131ab;\n  color: white;\n  border-radius: 4px;\n  border-color: #0a0131ab;\n\n  :hover {\n    background-color: white;\n    color: #0a0131ab;\n    border-color: #0a0131ab;\n  }\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FormContainer, Label, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'store/contacts/operation';\n\nexport default function ContactForm() {\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      resetForm();\n      return;\n    }\n\n    const user = {\n      id: 'id ' + nanoid(),\n      name,\n      number,\n    };\n\n    dispatch(addContacts(user));\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormContainer>\n      <form type=\"submit\" onSubmit={onSubmit}>\n        <Label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={onChange}\n            value={name}\n          />\n        </Label>\n        <Label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={onChange}\n            value={number}\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </FormContainer>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  margin-left: 15px;\n  background-color: #0a0131ab;\n  color: white;\n  border-radius: 4px;\n  border-color: #0a0131ab;\n  cursor: pointer;\n\n  :hover {\n    background-color: white;\n    color: #0a0131ab;\n    border-color: #0a0131ab;\n  }\n`;\n\nexport const Li = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  margin: 0 auto;\n  border-bottom: 1px solid #ccc;\n  width: 320px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Button, Li } from './ContactList.styled';\nimport { useEffect } from 'react';\nimport { deleteContacts, fetchContacts } from 'store/contacts/operation';\n\nexport default function ContactList() {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const normalizedName = filter.toLowerCase();\n  const contactsAll = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedName)\n  );\n\n  return contactsAll.map(contact => {\n    return (\n      <Li key={contact.id} id={contact.id}>\n        {contact.name}: {contact.number}\n        <Button\n          data-id={contact.id}\n          onClick={() => dispatch(deleteContacts(contact.id))}\n        >\n          Delete\n        </Button>\n      </Li>\n    );\n  });\n}\n","import styled from 'styled-components';\n\nexport const FiltContainer = styled.div`\n  margin: 30px auto;\n  width: 300px;\n  padding: 20px;\n  display: block;\n  border: 1px solid #477405;\n`;\n","import { changeFilter } from 'store/contacts/slice';\nimport { FiltContainer } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function Filter() {\n  const filterValue = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const handleChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  return (\n    <FiltContainer>\n      <h4>Find contacts by name</h4>\n      <input type=\"text\" value={filterValue} onChange={handleChange}></input>\n    </FiltContainer>\n  );\n}\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useSelector } from 'react-redux';\n\nexport default function Phonebook() {\n  const contacts = useSelector(state => state.contacts.items);\n  return (\n    <div className=\"App\">\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {contacts.length === 0 ? (\n        <p>There are no contacts in the phonebook yet.</p>\n      ) : (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","FormContainer","styled","Label","Button","ContactForm","contacts","useSelector","state","items","dispatch","useDispatch","useState","name","setName","number","setNumber","onChange","e","currentTarget","value","resetForm","type","onSubmit","preventDefault","find","contact","alert","user","addContacts","pattern","title","required","Li","ContactList","filter","useEffect","fetchContacts","normalizedName","toLowerCase","includes","map","onClick","deleteContacts","FiltContainer","Filter","filterValue","changeFilter","target","Phonebook","className","length"],"sourceRoot":""}